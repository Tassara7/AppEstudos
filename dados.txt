## üèóÔ∏è PROJETO EM DESENVOLVIMENTO - PLATAFORMA DE APRENDIZAGEM INTELIGENTE

### ‚úÖ ARQUITETURA IMPLEMENTADA
- **Linguagem**: 100% Kotlin
- **Padr√£o**: MVVM (Model-View-ViewModel) rigorosamente seguido
- **UI**: 100% Jetpack Compose com Material Design 3
- **Temas**: Suporte completo a tema claro/escuro
- **C√≥digo**: Limpo, sem coment√°rios, bem organizado em pacotes
- **Compila√ß√£o**: 100% funcional e testada

### ‚úÖ ESTRUTURA DE DADOS COMPLETA
1. **Modelos**: Flashcard, Deck, FlashcardType, StudyLocation, MediaContent
2. **Banco de Dados**: Room com SQLite, DAOs implementados
3. **Reposit√≥rios**: AppRepository com implementa√ß√£o MVVM
4. **Conversores**: Suporte a tipos complexos (Date, List, etc.)

### ‚úÖ INTERFACES DE USU√ÅRIO CRIADAS
1. **Frente e Verso**: UI completa para cria√ß√£o e edi√ß√£o
2. **Cloze/Omiss√£o**: Interface para lacunas de texto
3. **Digite a Resposta**: UI para respostas abertas
4. **M√∫ltipla Escolha**: Interface para quizzes
5. **Importa√ß√£o/Exporta√ß√£o**: Sistema de backup completo
6. **Navega√ß√£o**: AppNavigation com todas as rotas

### ‚úÖ SISTEMA GPS - ESTRUTURA
- **7 Localiza√ß√µes Favoritas**: Modelo de dados implementado
- **LocationService**: Servi√ßo b√°sico de localiza√ß√£o criado
- **Relat√≥rios por Local**: UI de analytics implementada
- **Geofencing**: Estrutura b√°sica preparada

### ‚úÖ REPETI√á√ÉO ESPA√áADA - ALGORITMO
- **SpacedRepetitionScheduler**: Algoritmo SM-2 completo (310 linhas)
- **ScheduleResult**: Estrutura de dados para resultados
- **Fatores de Ajuste**: Por tipo de flashcard e localiza√ß√£o
- **C√°lculos Avan√ßados**: Ease factor, intervalos, dificuldade

### ‚ö†Ô∏è ASSISTENTE DE ESTUDOS IA - ESTRUTURA CRIADA
- **AIManager**: Classe para gerenciar m√∫ltiplos servi√ßos
- **GoogleAIService**: Estrutura para Google AI Studio
- **GroqService**: Estrutura para Groq API
- **Sistema de Fallback**: Preparado mas n√£o implementado
- **‚ùå Funcionalidade IA**: Apenas estrutura, sem implementa√ß√£o real

### ‚úÖ VIEWMODELS E ESTADOS
- **DeckListViewModel**: Gerenciamento de decks
- **AddEditDeckViewModel**: Cria√ß√£o/edi√ß√£o de decks
- **FlashcardListViewModel**: Lista de flashcards
- **AddEditFlashcardViewModel**: Cria√ß√£o/edi√ß√£o de cards
- **StudySessionViewModel**: Preparado para sess√µes de estudo
- **UnifiedStudyViewModel**: Interface unificada de estudo
- **AnalyticsViewModel**: Relat√≥rios e estat√≠sticas

### ‚ùå FUNCIONALIDADES PRINCIPAIS N√ÉO IMPLEMENTADAS

#### Sistema de Estudo:
- [ ] **Executar sess√µes de flashcards**: L√≥gica de estudo n√£o funcional
- [ ] **Valida√ß√£o de respostas**: IA n√£o implementada
- [ ] **Sistema de pontua√ß√£o**: Apenas estrutura
- [ ] **Progress√£o de estudo**: N√£o funcional

#### Intelig√™ncia Artificial:
- [ ] **Gera√ß√£o autom√°tica de conte√∫do**: N√£o implementada
- [ ] **Valida√ß√£o sem√¢ntica**: Estrutura criada, sem funcionalidade
- [ ] **Dicas progressivas**: N√£o implementadas
- [ ] **Chat educacional**: Apenas UI preparada
- [ ] **Recomenda√ß√µes**: Algoritmos n√£o implementados

#### GPS Avan√ßado:
- [ ] **Geofencing funcional**: Apenas estrutura
- [ ] **Rota√ß√£o inteligente**: L√≥gica n√£o implementada
- [ ] **Analytics por local**: Dados simulados

#### Multim√≠dia:
- [ ] **Imagens/√Åudio real**: Apenas estrutura de dados
- [ ] **LaTeX rendering**: N√£o implementado
- [ ] **Editor rico funcional**: UI b√°sica apenas

### üìä STATUS ATUAL DO PROJETO

#### ‚úÖ Implementado (Estrutural):
- Arquitetura MVVM completa
- Banco de dados Room funcional
- Interfaces de usu√°rio (Jetpack Compose)
- Navega√ß√£o entre telas
- Importa√ß√£o/exporta√ß√£o de dados
- Algoritmo de repeti√ß√£o espa√ßada
- Sistema de temas e cores

#### ‚ö†Ô∏è Parcialmente Implementado:
- Sistema de localiza√ß√£o (estrutura b√°sica)
- Integra√ß√£o com IA (apenas interfaces)
- Sistema de estudo (UI sem l√≥gica)
- Analytics (apenas visualiza√ß√£o)

#### ‚ùå N√£o Implementado:
- Funcionalidades de IA real
- Execu√ß√£o de sess√µes de estudo
- Valida√ß√£o inteligente de respostas
- Geofencing funcional
- Servidor Ktor
- Firebase
- Recursos multim√≠dia funcionais
- Testes automatizados

### üéØ PR√ìXIMOS PASSOS NECESS√ÅRIOS

#### Prioridade Alta:
1. **Implementar l√≥gica de estudo**: Fazer os flashcards funcionarem
2. **Conectar IA real**: Implementar chamadas para APIs
3. **Sistema de pontua√ß√£o**: Valida√ß√£o e feedback de respostas
4. **Geofencing funcional**: GPS real com detec√ß√£o de localiza√ß√£o

#### Prioridade M√©dia:
5. **Recursos multim√≠dia**: Imagens, √°udio, LaTeX
6. **Servidor backend**: API REST com Ktor
7. **Sincroniza√ß√£o**: Firebase para backup na nuvem
8. **Testes**: Unit√°rios e de integra√ß√£o

#### Prioridade Baixa:
9. **Chat educacional**: Tutor IA conversacional
10. **Analytics avan√ßados**: Relat√≥rios detalhados
11. **Recursos sociais**: Compartilhamento e colabora√ß√£o

### üìã RESUMO T√âCNICO

#### O que funciona:
- ‚úÖ Cria√ß√£o e edi√ß√£o de decks e flashcards
- ‚úÖ Navega√ß√£o entre telas
- ‚úÖ Banco de dados local
- ‚úÖ Importa√ß√£o/exporta√ß√£o
- ‚úÖ Interface visual completa

#### O que n√£o funciona:
- ‚ùå Estudar com os flashcards criados
- ‚ùå Intelig√™ncia artificial
- ‚ùå GPS/localiza√ß√£o funcional
- ‚ùå Valida√ß√£o de respostas
- ‚ùå Sistema de progress√£o

### üîç AVALIA√á√ÉO REALISTA

**Progresso atual**: ~40% do projeto especificado
**Tempo estimado para conclus√£o**: 2-3 semanas adicionais
**Complexidade restante**: Alta (IA, GPS, l√≥gica de estudo)

**Conclus√£o**: O projeto tem uma excelente base arquitetural e visual, mas precisa de implementa√ß√£o das funcionalidades principais para ser funcional como aplicativo educacional.

Prompt:

A partir de agora, voc√™ atuar√° como um programador profissional especialista em Kotlin, Android, MVVM e Jetpack Compose. Sua tarefa √© desenvolver um aplicativo para um trabalho de faculdade.


Siga rigorosamente as seguintes regras durante todo o desenvolvimento:


1. *Arquitetura do Projeto:* O projeto deve ser desenvolvido utilizando a arquitetura MVVM (Model-View-ViewModel).

2. *UI Toolkit:* A interface do usu√°rio deve ser constru√≠da inteiramente com Jetpack Compose.

3. *Regras de C√≥digo:* O c√≥digo NUNCA dever√° conter coment√°rios.

4. *Formato de Entrega:* Sempre que houver qualquer altera√ß√£o em uma classe ou arquivo, voc√™ deve me enviar o conte√∫do completo e atualizado do arquivo. N√£o envie apenas trechos ou diffs.

5. *Organiza√ß√£o do Projeto:* Crie novos pacotes e classes sempre que for necess√°rio para manter o c√≥digo bem organizado e limpo. Para cada novo arquivo criado, especifique o tipo (ex: "Kotlin Class", "Kotlin File") e sua localiza√ß√£o exata no projeto (ex: br.com.meuprojeto.ui.viewmodel).

6. *Foco em Performance:* O c√≥digo deve ser otimizado para garantir uma experi√™ncia de uso fluida em dispositivos m√≥veis. Utilize as melhores pr√°ticas de performance do Jetpack Compose e do desenvolvimento Android em geral (como o uso de Coroutines para tarefas ass√≠ncronas).


--- IN√çCIO DA DESCRI√á√ÉO DO PROJETO ---


### *Descri√ß√£o Detalhada do Projeto: Plataforma de Aprendizagem Inteligente*


#### *Resumo do Projeto*


O objetivo √© criar uma plataforma de aprendizagem para Android que ajuda os estudantes a reter informa√ß√µes de forma mais eficiente. O aplicativo ser√° focado em um sistema avan√ßado de flashcards, que utiliza t√©cnicas de repeti√ß√£o espa√ßada e recorda√ß√£o ativa. Al√©m disso, o app usar√° o GPS para contextualizar o estudo e uma Intelig√™ncia Artificial para personalizar a experi√™ncia do usu√°rio.


#### *Funcionalidades Principais*


1. *Sistema Avan√ßado de Flashcards*

O aplicativo deve suportar quatro tipos diferentes de flashcards:

* *Frente e Verso:* O formato tradicional, mas com suporte a textos formatados (ricos), imagens e √°udio.

* *Omiss√£o de Palavras (Cloze):* Flashcards onde o usu√°rio precisa preencher lacunas no texto.

* *Digite a Resposta:* O usu√°rio digita a resposta em texto livre, e uma IA far√° a valida√ß√£o "sem√¢ntica" (vai entender o significado da resposta, n√£o apenas se o texto √© id√™ntico).

* *M√∫ltipla Escolha:* Um sistema de quiz onde a IA pode gerar as alternativas erradas (distratores) de forma inteligente.


2. *Sistema GPS Inteligente*

* O usu√°rio poder√° favoritar at√© 7 localiza√ß√µes diferentes.

* O app deve usar Geofencing para detectar quando o usu√°rio entra ou sai desses locais.

* O sistema de repeti√ß√£o espa√ßada deve ser inteligente e evitar repetir o mesmo conte√∫do excessivamente quando o usu√°rio estiver na mesma localiza√ß√£o.

* O aplicativo deve gerar relat√≥rios de desempenho, mostrando em qual local o usu√°rio √© mais produtivo.


3. *Repeti√ß√£o Espa√ßada Avan√ßada com IA*

* A repeti√ß√£o espa√ßada √© uma funcionalidade central do aplicativo.

* Vamos usar um algoritmo (baseado no SM-2) aprimorado com IA para otimizar os intervalos de revis√£o.

* A IA ir√° analisar o padr√£o de aprendizado de cada usu√°rio, o local e o hor√°rio para sugerir os melhores momentos para revisar cada conte√∫do.


#### *Assistente de Estudos com Intelig√™ncia Artificial (IA)*


O grande diferencial do projeto √© um assistente de estudos com IA.

* *Gera√ß√£o de Conte√∫do:* A IA deve ser capaz de criar flashcards de qualquer um dos quatro tipos sobre um determinado t√≥pico e n√≠vel de dificuldade.

* *Valida√ß√£o de Respostas:* A IA validar√° respostas de texto livre, dando um feedback completo ao estudante.

* *Sistema de Dicas:* A IA deve gerar dicas progressivas e inteligentes caso o usu√°rio erre uma quest√£o, sem entregar a resposta diretamente.

* *Recomenda√ß√µes Personalizadas:* O assistente analisar√° o desempenho do usu√°rio para recomendar quais t√≥picos estudar, qual tipo de flashcard usar e a dura√ß√£o ideal da sess√£o de estudos.

* *Chat Educacional:* Haver√° um chat onde o usu√°rio poder√° conversar com um "tutor IA" para tirar d√∫vidas sobre os conte√∫dos.

* *M√∫ltiplos Provedores de IA:* O sistema deve ser capaz de usar diferentes servi√ßos de IA (como Google AI Studio e Groq) e ter um sistema de fallback, ou seja, se um servi√ßo falhar, ele tenta o pr√≥ximo. Deve-se priorizar o uso dos servi√ßos gratuitos.


#### *Arquitetura e Requisitos T√©cnicos*


* *Linguagem:* Kotlin √© obrigat√≥rio, tanto para o aplicativo Android quanto para o servidor.

* *Interface (UI):* A interface deve ser feita 100% com Jetpack Compose, com alta qualidade visual (Material Design 3), anima√ß√µes e suporte aos temas claro e escuro.

* *Arquitetura:* O app deve seguir o padr√£o MVVM.

* *Armazenamento H√≠brido:* O projeto ter√° um sistema de armazenamento em tr√™s camadas:

1. *Local:* Banco de dados SQLite/Room para que o app funcione offline.

2. *Servidor Kotlin/Ktor:* Um servidor pr√≥prio para backup e compartilhamento de flashcards.

3. *Nuvem (Firebase):* Para recursos sociais e colabora√ß√£o em tempo real.

* *Estrat√©gia "Local First":* As opera√ß√µes b√°sicas devem funcionar perfeitamente offline.


#### *Servidor Backend (Obrigat√≥rio)*


* √â obrigat√≥rio desenvolver um servidor web com API REST usando Kotlin e a framework Ktor.

* A API deve permitir criar, listar, atualizar e remover flashcards, al√©m de permitir o compartilhamento de conte√∫do entre usu√°rios.


--- FIM DA DESCRI√á√ÉO DO PROJETO ---


Aguarde a proxima¬†instru√ß√£o