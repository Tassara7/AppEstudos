Prompt:

A partir de agora, você atuará como um programador profissional especialista em Kotlin, Android, MVVM e Jetpack Compose. Sua tarefa é desenvolver um aplicativo para um trabalho de faculdade.


Siga rigorosamente as seguintes regras durante todo o desenvolvimento:


1. *Arquitetura do Projeto:* O projeto deve ser desenvolvido utilizando a arquitetura MVVM (Model-View-ViewModel).

2. *UI Toolkit:* A interface do usuário deve ser construída inteiramente com Jetpack Compose.

3. *Regras de Código:* O código NUNCA deverá conter comentários.

4. *Formato de Entrega:* Sempre que houver qualquer alteração em uma classe ou arquivo, você deve me enviar o conteúdo completo e atualizado do arquivo. Não envie apenas trechos ou diffs.

5. *Organização do Projeto:* Crie novos pacotes e classes sempre que for necessário para manter o código bem organizado e limpo. Para cada novo arquivo criado, especifique o tipo (ex: "Kotlin Class", "Kotlin File") e sua localização exata no projeto (ex: br.com.meuprojeto.ui.viewmodel).

6. *Foco em Performance:* O código deve ser otimizado para garantir uma experiência de uso fluida em dispositivos móveis. Utilize as melhores práticas de performance do Jetpack Compose e do desenvolvimento Android em geral (como o uso de Coroutines para tarefas assíncronas).


--- INÍCIO DA DESCRIÇÃO DO PROJETO ---


### *Descrição Detalhada do Projeto: Plataforma de Aprendizagem Inteligente*


#### *Resumo do Projeto*


O objetivo é criar uma plataforma de aprendizagem para Android que ajuda os estudantes a reter informações de forma mais eficiente. O aplicativo será focado em um sistema avançado de flashcards, que utiliza técnicas de repetição espaçada e recordação ativa. Além disso, o app usará o GPS para contextualizar o estudo e uma Inteligência Artificial para personalizar a experiência do usuário.


#### *Funcionalidades Principais*


1. *Sistema Avançado de Flashcards*

O aplicativo deve suportar quatro tipos diferentes de flashcards:

* *Frente e Verso:* O formato tradicional, mas com suporte a textos formatados (ricos), imagens e áudio.

* *Omissão de Palavras (Cloze):* Flashcards onde o usuário precisa preencher lacunas no texto.

* *Digite a Resposta:* O usuário digita a resposta em texto livre, e uma IA fará a validação "semântica" (vai entender o significado da resposta, não apenas se o texto é idêntico).

* *Múltipla Escolha:* Um sistema de quiz onde a IA pode gerar as alternativas erradas (distratores) de forma inteligente.


2. *Sistema GPS Inteligente*

* O usuário poderá favoritar até 7 localizações diferentes.

* O app deve usar Geofencing para detectar quando o usuário entra ou sai desses locais.

* O sistema de repetição espaçada deve ser inteligente e evitar repetir o mesmo conteúdo excessivamente quando o usuário estiver na mesma localização.

* O aplicativo deve gerar relatórios de desempenho, mostrando em qual local o usuário é mais produtivo.


3. *Repetição Espaçada Avançada com IA*

* A repetição espaçada é uma funcionalidade central do aplicativo.

* Vamos usar um algoritmo (baseado no SM-2) aprimorado com IA para otimizar os intervalos de revisão.

* A IA irá analisar o padrão de aprendizado de cada usuário, o local e o horário para sugerir os melhores momentos para revisar cada conteúdo.


#### *Assistente de Estudos com Inteligência Artificial (IA)*


O grande diferencial do projeto é um assistente de estudos com IA.

* *Geração de Conteúdo:* A IA deve ser capaz de criar flashcards de qualquer um dos quatro tipos sobre um determinado tópico e nível de dificuldade.

* *Validação de Respostas:* A IA validará respostas de texto livre, dando um feedback completo ao estudante.

* *Sistema de Dicas:* A IA deve gerar dicas progressivas e inteligentes caso o usuário erre uma questão, sem entregar a resposta diretamente.

* *Recomendações Personalizadas:* O assistente analisará o desempenho do usuário para recomendar quais tópicos estudar, qual tipo de flashcard usar e a duração ideal da sessão de estudos.

* *Chat Educacional:* Haverá um chat onde o usuário poderá conversar com um "tutor IA" para tirar dúvidas sobre os conteúdos.

* *Múltiplos Provedores de IA:* O sistema deve ser capaz de usar diferentes serviços de IA (como Google AI Studio e Groq) e ter um sistema de fallback, ou seja, se um serviço falhar, ele tenta o próximo. Deve-se priorizar o uso dos serviços gratuitos.


#### *Arquitetura e Requisitos Técnicos*


* *Linguagem:* Kotlin é obrigatório, tanto para o aplicativo Android quanto para o servidor.

* *Interface (UI):* A interface deve ser feita 100% com Jetpack Compose, com alta qualidade visual (Material Design 3), animações e suporte aos temas claro e escuro.

* *Arquitetura:* O app deve seguir o padrão MVVM.

* *Armazenamento Híbrido:* O projeto terá um sistema de armazenamento em três camadas:

1. *Local:* Banco de dados SQLite/Room para que o app funcione offline.

2. *Servidor Kotlin/Ktor:* Um servidor próprio para backup e compartilhamento de flashcards.

3. *Nuvem (Firebase):* Para recursos sociais e colaboração em tempo real.

* *Estratégia "Local First":* As operações básicas devem funcionar perfeitamente offline.


#### *Servidor Backend (Obrigatório)*


* É obrigatório desenvolver um servidor web com API REST usando Kotlin e a framework Ktor.

* A API deve permitir criar, listar, atualizar e remover flashcards, além de permitir o compartilhamento de conteúdo entre usuários.


--- FIM DA DESCRIÇÃO DO PROJETO ---


Aguarde a proxima instrução